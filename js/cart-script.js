// –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ –∂–µ, —á—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ)
const productsData = [
    { id: 1, name: "–®–µ—Ä—Å—Ç—è–Ω–æ–µ –ø–∞–ª—å—Ç–æ", category: "coats", size: ["S", "M", "L"], price: 10000, oldPrice: 12500, isNew: true, image: "img/Fashion wool coat -8.png" },
    // ... –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
];

// –ü—Ä–æ–º–æ–∫–æ–¥—ã
const promoCodes = {
    "FRIEND10": { discount: 10, type: "percent" },
    "WELCOME20": { discount: 20, type: "percent", minOrder: 5000 },
    "FREESHIP": { discount: 500, type: "fixed", freeShipping: true },
    "SUMMER15": { discount: 15, type: "percent" }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
const state = {
    cart: JSON.parse(localStorage.getItem('cart')) || [],
    appliedPromo: null,
    recommendedProducts: []
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    cartItems: document.getElementById('cart-items'),
    cartCount: document.getElementById('cart-count'),
    cartItemsCount: document.getElementById('cart-items-count'),
    summaryItemsPrice: document.getElementById('summary-items-price'),
    summaryDiscount: document.getElementById('summary-discount'),
    summaryDelivery: document.getElementById('summary-delivery'),
    summaryTotal: document.getElementById('summary-total'),
    checkoutBtn: document.getElementById('checkout-btn'),
    promoCode: document.getElementById('promo-code'),
    applyPromo: document.getElementById('apply-promo'),
    promoHint: document.getElementById('promo-hint'),
    recommendedGrid: document.getElementById('recommended-grid')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
function initCart() {
    renderCart();
    updateCartSummary();
    loadRecommendedProducts();
    setupEventListeners();
}

// –†–µ–Ω–¥–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
function renderCart() {
    if (state.cart.length === 0) {
        elements.cartItems.innerHTML = `
            <div class="cart-empty">
                <div class="cart-empty__icon">üõí</div>
                <h2 class="cart-empty__title">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
                <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞</p>
                <a href="catalog.html" class="btn btn--primary" style="margin-top: 20px;">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥</a>
            </div>
        `;
        elements.checkoutBtn.disabled = true;
        return;
    }

    elements.cartItems.innerHTML = state.cart.map(item => `
        <div class="cart-item" data-id="${item.id}">
            <img src="${item.image}" alt="${item.name}" class="cart-item__image">
            <div class="cart-item__content">
                <div>
                    <h3 class="cart-item__title">${item.name}</h3>
                    <div class="cart-item__prices">
                        <span class="cart-item__price">${item.price.toLocaleString()} ‚ÇΩ</span>
                        ${item.oldPrice ? `<span class="cart-item__old-price">${item.oldPrice.toLocaleString()} ‚ÇΩ</span>` : ''}
                    </div>
                </div>
                <div class="cart-item__size">–†–∞–∑–º–µ—Ä: ${item.selectedSize || 'M'}</div>
            </div>
            <div class="cart-item__actions">
                <button class="cart-item__remove">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 6H5H21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    –£–¥–∞–ª–∏—Ç—å
                </button>
                <div class="cart-item__quantity">
                    <button class="quantity-btn minus">-</button>
                    <span class="quantity-value">${item.quantity}</span>
                    <button class="quantity-btn plus">+</button>
                </div>
            </div>
        </div>
    `).join('');

    updateCartCount();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
function updateCartCount() {
    const totalItems = state.cart.reduce((sum, item) => sum + item.quantity, 0);
    elements.cartCount.textContent = totalItems;
    elements.cartItemsCount.textContent = `${totalItems} ${pluralize(totalItems, ['—Ç–æ–≤–∞—Ä', '—Ç–æ–≤–∞—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–≤'])}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function updateCartSummary() {
    const subtotal = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    let discount = 0;
    let delivery = 500; // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if (state.appliedPromo) {
        const promo = promoCodes[state.appliedPromo];
        
        if (promo.type === "percent") {
            discount = subtotal * (promo.discount / 100);
        } else {
            discount = promo.discount;
        }
        
        if (promo.freeShipping) {
            delivery = 0;
        }
    }
    
    // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 5000 ‚ÇΩ
    if (subtotal - discount >= 5000) {
        delivery = 0;
    }
    
    const total = subtotal - discount + delivery;
    
    elements.summaryItemsPrice.textContent = `${subtotal.toLocaleString()} ‚ÇΩ`;
    elements.summaryDiscount.textContent = `-${discount.toLocaleString()} ‚ÇΩ`;
    elements.summaryDelivery.textContent = delivery === 0 ? "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" : `${delivery.toLocaleString()} ‚ÇΩ`;
    elements.summaryTotal.textContent = `${total.toLocaleString()} ‚ÇΩ`;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
function loadRecommendedProducts() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
    // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const inCartIds = state.cart.map(item => item.id);
    state.recommendedProducts = productsData
        .filter(product => !inCartIds.includes(product.id))
        .sort(() => 0.5 - Math.random())
        .slice(0, 4);
    
    renderRecommendedProducts();
}

// –†–µ–Ω–¥–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
function renderRecommendedProducts() {
    elements.recommendedGrid.innerHTML = state.recommendedProducts.map(product => `
        <article class="product-card">
            ${product.isNew ? '<span class="product-card__badge">–ù–æ–≤–∏–Ω–∫–∞</span>' : ''}
            <div class="product-card__image-wrapper">
                <img src="${product.image}" alt="${product.name}" class="product-card__image" loading="lazy">
            </div>
            <div class="product-card__content">
                <h3 class="product-card__title">${product.name}</h3>
                <div class="product-card__price">
                    <span class="product-card__current-price">${product.price.toLocaleString()} ‚ÇΩ</span>
                    ${product.oldPrice ? `<span class="product-card__old-price">${product.oldPrice.toLocaleString()} ‚ÇΩ</span>` : ''}
                </div>
                <div class="product-card__actions">
                    <button class="btn btn--secondary add-to-cart" data-id="${product.id}">–í –∫–æ—Ä–∑–∏–Ω—É</button>
                    <button class="btn btn--outline quick-view" data-id="${product.id}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                </div>
            </div>
        </article>
    `).join('');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    elements.cartItems.addEventListener('click', (e) => {
        if (e.target.closest('.cart-item__remove')) {
            const itemElement = e.target.closest('.cart-item');
            const itemId = parseInt(itemElement.dataset.id);
            removeFromCart(itemId);
        }
    });
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    elements.cartItems.addEventListener('click', (e) => {
        const itemElement = e.target.closest('.cart-item');
        if (!itemElement) return;
        
        const itemId = parseInt(itemElement.dataset.id);
        const item = state.cart.find(item => item.id === itemId);
        
        if (e.target.classList.contains('plus')) {
            item.quantity += 1;
            updateCartItem(itemId, item.quantity);
        } else if (e.target.classList.contains('minus')) {
            if (item.quantity > 1) {
                item.quantity -= 1;
                updateCartItem(itemId, item.quantity);
            }
        }
    });
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    elements.applyPromo.addEventListener('click', applyPromoCode);
    elements.promoCode.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') applyPromoCode();
    });
    
    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elements.checkoutBtn.addEventListener('click', checkout);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    elements.recommendedGrid.addEventListener('click', (e) => {
        if (e.target.classList.contains('add-to-cart')) {
            const productId = parseInt(e.target.dataset.id);
            addToCart(productId);
            e.target.textContent = '‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ';
            setTimeout(() => {
                e.target.textContent = '–í –∫–æ—Ä–∑–∏–Ω—É';
            }, 2000);
        }
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
function removeFromCart(productId) {
    state.cart = state.cart.filter(item => item.id !== productId);
    saveCart();
    renderCart();
    updateCartSummary();
    loadRecommendedProducts();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function updateCartItem(productId, quantity) {
    const item = state.cart.find(item => item.id === productId);
    if (item) {
        item.quantity = quantity;
        saveCart();
        renderCart();
        updateCartSummary();
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
function applyPromoCode() {
    const code = elements.promoCode.value.trim().toUpperCase();
    
    if (!code) {
        elements.promoHint.textContent = "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥";
        elements.promoHint.className = "promo-hint error";
        return;
    }
    
    if (!promoCodes[code]) {
        elements.promoHint.textContent = "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω";
        elements.promoHint.className = "promo-hint error";
        return;
    }
    
    const promo = promoCodes[code];
    const subtotal = state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    if (promo.minOrder && subtotal < promo.minOrder) {
        elements.promoHint.textContent = `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promo.minOrder} ‚ÇΩ`;
        elements.promoHint.className = "promo-hint error";
        return;
    }
    
    state.appliedPromo = code;
    elements.promoHint.textContent = `–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω: —Å–∫–∏–¥–∫–∞ ${promo.discount}${promo.type === "percent" ? "%" : " ‚ÇΩ"}`;
    elements.promoHint.className = "promo-hint success";
    updateCartSummary();
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    if (state.cart.length === 0) return;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    alert(`–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°—É–º–º–∞: ${elements.summaryTotal.textContent}`);
    
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    state.cart = [];
    state.appliedPromo = null;
    saveCart();
    renderCart();
    updateCartSummary();
    loadRecommendedProducts();
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    elements.promoCode.value = "";
    elements.promoHint.textContent = "";
    elements.promoHint.className = "promo-hint";
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É (–¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
function addToCart(productId) {
    const product = productsData.find(p => p.id === productId);
    const existingItem = state.cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        state.cart.push({
            ...product,
            quantity: 1,
            selectedSize: product.size[0] // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        });
    }
    
    saveCart();
    renderCart();
    updateCartSummary();
    loadRecommendedProducts();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
function saveCart() {
    localStorage.setItem('cart', JSON.stringify(state.cart));
    updateCartCount();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
function pluralize(number, words) {
    const cases = [2, 0, 1, 1, 1, 2];
    return words[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[Math.min(number % 10, 5)]];
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', initCart);